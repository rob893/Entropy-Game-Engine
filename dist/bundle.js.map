{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/mario.png","webpack:///./src/assets/marioLeft.png","webpack:///./src/assets/background.png","webpack:///./src/assets/trump_idle.png","webpack:///./src/GameEngine/Core/Vector2.ts","webpack:///./src/GameEngine/Core/Geometry.ts","webpack:///./src/GameEngine/Core/Physics.ts","webpack:///./src/GameEngine/Core/Time.ts","webpack:///./src/GameEngine/Core/GameEngine.ts","webpack:///./src/GameEngine/Components/Component.ts","webpack:///./src/GameEngine/Core/Helpers/LiteEvent.ts","webpack:///./src/GameEngine/Components/Transform.ts","webpack:///./src/GameEngine/Core/GameObject.ts","webpack:///./src/GameEngine/Components/RectangleCollider.ts","webpack:///./src/Mario/Components/Motor.ts","webpack:///./src/Mario/Components/BallMotor.ts","webpack:///./src/GameEngine/Components/RectangleRenderer.ts","webpack:///./src/Mario/GameObjects/Ball.ts","webpack:///./src/Mario/Components/GameManager.ts","webpack:///./src/GameEngine/Components/FPSCounter.ts","webpack:///./src/GameEngine/Core/Helpers/Keys.ts","webpack:///./src/GameEngine/Components/Rigidbody.ts","webpack:///./src/GameEngine/Components/Animator.ts","webpack:///./src/GameEngine/Core/Animation.ts","webpack:///./src/Mario/Components/PlayerMotor.ts","webpack:///./src/Mario/Components/ComputerMotor.ts","webpack:///./src/index.ts","webpack:///./src/GameEngine/Core/ImageBackground.ts","webpack:///./src/Mario/GameObjects/GameManagerObject.ts","webpack:///./src/Mario/GameObjects/Player.ts","webpack:///./src/Mario/GameObjects/Computer.ts","webpack:///./src/Mario/GameObjects/Trump.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector2","[object Object]","x","y","this","sqrMagnitude","magnitude","Math","sqrt","normalized","divide","rightOperand","equalX","equalY","up","down","left","right","zero","one","leftOperand","point1","point2","distanceX","distanceY","from","to","cos0","dot","acos","angleInRadians","PI","Geometry","q","max","min","val","p1","q1","p2","q2","o1","orientation","o2","o3","o4","onSegment","tl","tr","bl","br","doIntersect","Physics_Physics","rigidbodies","colliders","gravity","Instance","instance","rb","push","collider","origin","direction","distance","result","hitColliders","raycastAll","closestColliderDistance","colliderDistance","transform","position","results","terminalPoint","add","multiplyScalar","doIntersectRectangle","topLeft","topRight","bottomLeft","bottomRight","Time","DeltaTime","deltaTime","TotalTime","Date","now","startTime","prevTime","GameEngine_GameEngine","gameObjects","gameObjectMap","Map","gameObjectNumMap","gameInitialized","paused","physicsEngine","gameCanvas","background","setGameCanvas","setGameObjects","Error","start","length","requestAnimationFrame","gameLoop","newGameObject","has","id","originalId","set","canvasContext","console","log","getContext","gameObject","updateTime","renderBackground","update","render","Component","LiteEvent","handlers","handler","filter","h","data","slice","forEach","Transform_Transform","width","height","super","onMove","rotation","onMoved","expose","center","bottomCenter","translation","trigger","GameObject_GameObject","components","componentMap","getGameCanvas","component","componentType","newComponent","constructor","RectangleCollider_RectangleCollider","onCollide","getTransform","onTransformMoved","addCollider","other","onCollided","Motor_Motor","xVelocity","yVelocity","speed","move","handleOutOfBounds","BallMotor_BallMotor","ready","reset","getComponent","playerCollider","getGameObjectById","computerCollider","handleCollision","detectCollisions","setTimeout","abs","translate","setPosition","random","detectCollision","RectangleRenderer_RectangleRenderer","color","fillStyle","fillRect","Ball_Ball","ballComponents","setComponents","GameManager_GameManager","document","getElementById","addEventListener","printGameData","togglePause","testInstantiate","player","undefined","instantiate","FPSCounter_FPSCounter","numFrames","timer","FPS","getGameCanvasContext","font","fillText","toFixed","Keys","Rigidbody_Rigidbody","mass","isKinomatic","velocity","acceleration","force","addRigidbody","addGravity","divideScalar","newtonsDown","addForce","Animator_Animator","initialAnimation","animation","drawSprite","animationReady","drawImage","currentFrame","updateAnimation","Animation_Animation","spriteSheetUrl","numRows","delay","specificRows","loop","frames","frameIndex","spriteSheet","Image","src","onload","spriteWidth","spriteHeight","row","canvas","createElement","frame","toDataURL","j","PlayerMotor_PlayerMotor","movingRight","movingLeft","jumping","onKeyDown","event","onKeyUp","onClick","moveRightAnimation","mario_default","a","moveLeftAnimation","marioLeft_default","rigidBody","animator","isMoving","resetForce","raycast","keyCode","RIGHT","D","setAnimation","LEFT","A","SPACE","jump","ComputerMotor_ComputerMotor","ballTransform","quarterFieldX","midFieldY","gameEngine","src_background","imageSrc","image","background_default","src_gameManager","gameManagerComponents","gameManager","createInstance","playerComponents","ball","computerComponents","trump_idle_default","initializeGame","startGame"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __webpack_public_path__ + \"249faac8674a31fa922af6089863bffa.png\";","module.exports = __webpack_public_path__ + \"0121541694936934c979ae0cf0c66a34.png\";","module.exports = __webpack_public_path__ + \"27f0d2999953e5a8c430d7ae4c132a11.png\";","module.exports = __webpack_public_path__ + \"007ba97e337cb75dc893e5a570455315.png\";","export class Vector2 {\r\n    \r\n    public x: number = 0;\r\n    public y: number = 0;\r\n\r\n    \r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public get sqrMagnitude(): number {\r\n        return (this.x * this.x) + (this.y * this.y);\r\n    }\r\n\r\n    public get magnitude(): number {\r\n        return Math.sqrt(this.sqrMagnitude);\r\n    }\r\n\r\n    public get normalized(): Vector2 {\r\n        return this.divide(new Vector2(this.magnitude, this.magnitude));\r\n    }\r\n\r\n    public add(rightOperand: Vector2): Vector2 {\r\n        this.x += rightOperand.x;\r\n        this.y += rightOperand.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    public subtract(rightOperand: Vector2): Vector2 {\r\n        this.x -= rightOperand.x;\r\n        this.y -= rightOperand.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    public multiply(rightOperand: Vector2): Vector2 {\r\n        this.x *= rightOperand.x;\r\n        this.y *= rightOperand.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    public divide(rightOperand: Vector2): Vector2 {\r\n        this.x /= rightOperand.x;\r\n        this.y /= rightOperand.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    public equals(rightOperand: Vector2): boolean {\r\n        let equalX = this.x === rightOperand.x;\r\n        let equalY = this.y === rightOperand.y;\r\n\r\n        return equalX && equalY;\r\n    }\r\n\r\n    public multiplyScalar(rightOperand: number): Vector2 {\r\n        this.x *= rightOperand;\r\n        this.y *= rightOperand;\r\n\r\n        return this;\r\n    }\r\n\r\n    public divideScalar(rightOperand: number): Vector2 {\r\n        this.x /= rightOperand;\r\n        this.y /= rightOperand;\r\n\r\n        return this;\r\n    }\r\n\r\n    public zero(): Vector2 {\r\n        this.x = 0;\r\n        this.y = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n    public static get up(): Vector2 {\r\n        return new Vector2(0, 1);\r\n    }\r\n\r\n    public static get down(): Vector2 {\r\n        return new Vector2(0, -1);\r\n    }\r\n\r\n    public static get left(): Vector2 {\r\n        return new Vector2(-1, 0);\r\n    }\r\n\r\n    public static get right(): Vector2 {\r\n        return new Vector2(1, 0);\r\n    }\r\n\r\n    public static get zero(): Vector2 {\r\n        return new Vector2(0, 0);\r\n    }\r\n\r\n    public static get one(): Vector2 {\r\n        return new Vector2(1, 1);\r\n    }\r\n\r\n    public static add(leftOperand: Vector2, rightOperand: Vector2): Vector2 {\r\n        return new Vector2(leftOperand.x + rightOperand.x, leftOperand.y + rightOperand.y);\r\n    }\r\n\r\n    public static distance(point1: Vector2, point2: Vector2): number {\r\n        let distanceX: number = point1.x - point2.x;\r\n        let distanceY: number = point1.y - point2.y;\r\n\r\n        return Math.sqrt((distanceX * distanceX) + (distanceY * distanceY));\r\n    }\r\n\r\n    public static angleInRadians(from: Vector2, to: Vector2): number {\r\n        let cos0 = Vector2.dot(from, to) / (from.magnitude * to.magnitude);\r\n\r\n        return Math.acos(cos0);\r\n    }\r\n\r\n    public static angleInDegrees(from: Vector2, to: Vector2): number {\r\n        return this.angleInRadians(from, to) * 180 / Math.PI;\r\n    }\r\n\r\n    public static dot(point1: Vector2, point2: Vector2): number {\r\n        return (point1.x * point2.x) + (point1.y * point2.y);\r\n    }\r\n}","import { Vector2 } from \"./Vector2\";\r\n\r\nexport abstract class Geometry {\r\n\r\n    /**\r\n     * Given three colinear points p, q, r, the function checks if point q lies on line segment 'pr' \r\n     */\r\n    public static onSegment(p: Vector2, q: Vector2, r: Vector2): boolean {\r\n        if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) &&\r\n            q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Finds the orientation of ordered triplet (p, q, r). \r\n     * The function returns following values \r\n     * 0 --> p, q and r are colinear \r\n     * 1 --> Clockwise \r\n     * 2 --> Counterclockwise\r\n     */\r\n    public static orientation(p: Vector2, q: Vector2, r: Vector2): number {\r\n        let val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n\r\n        if (val === 0) {\r\n            return 0; // colinear \r\n        }\r\n\r\n        return (val > 0) ? 1 : 2; // clock or counterclock wise \r\n    }\r\n\r\n    /**\r\n     * Returns true if line segment 'p1q1' and 'p2q2' intersect.\r\n     */\r\n    public static doIntersect(p1: Vector2, q1: Vector2, p2: Vector2, q2: Vector2): boolean {\r\n        // Find the four orientations needed for general and \r\n        // special cases \r\n        let o1 = this.orientation(p1, q1, p2);\r\n        let o2 = this.orientation(p1, q1, q2);\r\n        let o3 = this.orientation(p2, q2, p1);\r\n        let o4 = this.orientation(p2, q2, q1);\r\n\r\n        // General case \r\n        if (o1 !== o2 && o3 !== o4) {\r\n            return true;\r\n        }\r\n\r\n        // Special Cases \r\n        // p1, q1 and p2 are colinear and p2 lies on segment p1q1 \r\n        if (o1 === 0 && this.onSegment(p1, p2, q1)) {\r\n            return true;\r\n        }\r\n\r\n        // p1, q1 and q2 are colinear and q2 lies on segment p1q1 \r\n        if (o2 === 0 && this.onSegment(p1, q2, q1)) {\r\n            return true;\r\n        }\r\n\r\n        // p2, q2 and p1 are colinear and p1 lies on segment p2q2 \r\n        if (o3 === 0 && this.onSegment(p2, p1, q2)) {\r\n            return true;\r\n        }\r\n\r\n        // p2, q2 and q1 are colinear and q1 lies on segment p2q2 \r\n        if (o4 === 0 && this.onSegment(p2, q1, q2)) {\r\n            return true;\r\n        }\r\n\r\n        return false; // Doesn't fall in any of the above cases \r\n    }\r\n\r\n    public static doIntersectRectangle(p1: Vector2, p2: Vector2, tl: Vector2, tr: Vector2, bl: Vector2, br: Vector2): boolean {\r\n        if (this.doIntersect(p1, p2, tl, tr) || //Line intersects top border\r\n            this.doIntersect(p1, p2, tl, bl) || //Line intersects left border\r\n            this.doIntersect(p1, p2, bl, br) || //Line intersects bottom border\r\n            this.doIntersect(p1, p2, tr, br)) { //Line intersects right border\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n} ","import { Rigidbody } from \"../Components/Rigidbody\";\r\nimport { RectangleCollider } from \"../Components/RectangleCollider\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { Geometry } from \"./Geometry\";\r\n\r\nexport class Physics {\r\n\r\n    private static instance: Physics;\r\n\r\n    public gravity: number;\r\n\r\n    private rigidbodies: Rigidbody[];\r\n    private colliders: RectangleCollider[];\r\n\r\n\r\n    private constructor() {\r\n        this.rigidbodies = [];\r\n        this.colliders = [];\r\n        this.gravity = 1;\r\n    }\r\n\r\n    public static get Instance(): Physics {\r\n        return this.instance || (this.instance = new Physics());\r\n    }\r\n\r\n    // public updatePhysics(): void {\r\n    //     for(let i: number = 0, l: number = this.rigidbodies.length; i < l; i++) {\r\n    //         this.rigidbodies[i].addGravity(this.gravity);\r\n    //     }\r\n    // }\r\n\r\n    public addRigidbody(rb: Rigidbody): void {\r\n        this.rigidbodies.push(rb);\r\n        //this.colliders.push(rb.gameObject.getComponent(RectangleCollider));\r\n    }\r\n\r\n    public addCollider(collider: RectangleCollider): void {\r\n        this.colliders.push(collider);\r\n    }\r\n\r\n    public static raycast(origin: Vector2, direction: Vector2, distance: number): RectangleCollider | null {\r\n        let result: RectangleCollider = null;\r\n        let hitColliders = Physics.raycastAll(origin, direction, distance);\r\n        let closestColliderDistance = -10;\r\n\r\n        for (let collider of hitColliders) {\r\n            let colliderDistance = Vector2.distance(origin, collider.transform.position);\r\n\r\n            if (colliderDistance > closestColliderDistance) {\r\n                result = collider;\r\n                closestColliderDistance = colliderDistance;\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    public static raycastAll(origin: Vector2, direction: Vector2, distance: number): RectangleCollider[] {\r\n        let results: RectangleCollider[] = [];\r\n        let terminalPoint = Vector2.add(origin, direction.multiplyScalar(distance));\r\n\r\n        for (let collider of Physics.Instance.colliders) {\r\n            if (Geometry.doIntersectRectangle(origin, terminalPoint, collider.topLeft, collider.topRight, collider.bottomLeft, collider.bottomRight)) {\r\n                results.push(collider);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public static sphereCast() {}\r\n\r\n    public static overlapSphere(): RectangleCollider[] { return [] }\r\n}","export abstract class Time {\r\n\r\n    private static deltaTime: number = 0;\r\n    private static startTime: number = 0;\r\n    private static prevTime: number = 0;\r\n\r\n\r\n    public static get DeltaTime(): number {\r\n        return this.deltaTime;\r\n    }\r\n\r\n    public static get TotalTime(): number {\r\n        return (Date.now() - this.startTime) / 1000;\r\n    }\r\n\r\n    public static start(): void {\r\n        this.prevTime = Date.now();\r\n        this.startTime = this.prevTime;\r\n    }\r\n\r\n    public static updateTime(): void {\r\n        this.deltaTime = (Date.now() - this.prevTime) / 1000;\r\n        this.prevTime = Date.now();\r\n    }\r\n}","import { Physics } from \"./Physics\";\r\nimport { GameObject } from \"./GameObject\";\r\nimport { Time } from \"./Time\";\r\nimport { IBackground } from \"./Interfaces/IBackground\";\r\n\r\nexport class GameEngine {\r\n\r\n    private static instance: GameEngine;\r\n\r\n    private gameCanvas: HTMLCanvasElement;\r\n    private canvasContext: CanvasRenderingContext2D;\r\n    private background: IBackground;\r\n    private physicsEngine: Physics;\r\n    private gameObjects: GameObject[] = [];\r\n    private gameObjectMap: Map<string, GameObject> = new Map<string, GameObject>();\r\n    private gameObjectNumMap: Map<string, number> = new Map<string, number>();\r\n    private gameInitialized: boolean = false;\r\n    private paused: boolean = false;\r\n\r\n\r\n    private constructor() {\r\n        this.gameInitialized = false;\r\n        this.physicsEngine = Physics.Instance;\r\n    }\r\n\r\n    public static get Instance(): GameEngine {\r\n        return this.instance || (this.instance = new GameEngine());\r\n    }\r\n\r\n    public initializeGame(gameCanvas: HTMLCanvasElement, gameObjects: GameObject[], background: IBackground): void {\r\n        this.background = background;\r\n        this.setGameCanvas(gameCanvas);\r\n        this.setGameObjects(gameObjects);\r\n         \r\n        this.gameInitialized = true;\r\n    }\r\n\r\n    public startGame(): void {\r\n\r\n        if(!this.gameInitialized) {\r\n            throw new Error(\"The game is not initialized yet!\");\r\n        }\r\n\r\n        Time.start();\r\n        this.paused = false;\r\n\r\n        for(let i: number = 0; i < this.gameObjects.length; i++) {\r\n            this.gameObjects[i].start();\r\n        }\r\n\r\n        requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n\r\n    public instantiate(newGameObject: GameObject): GameObject {\r\n        if (this.gameObjectMap.has(newGameObject.id)) {\r\n            let originalId = newGameObject.id;\r\n            newGameObject.id += \" Clone(\" + this.gameObjectNumMap.get(originalId) + \")\";\r\n            this.gameObjectNumMap.set(originalId, this.gameObjectNumMap.get(originalId) + 1);\r\n        }\r\n        else {\r\n            this.gameObjectNumMap.set(newGameObject.id, 1);\r\n        }\r\n        \r\n        this.gameObjectMap.set(newGameObject.id, newGameObject);\r\n        this.gameObjects.push(newGameObject);\r\n        newGameObject.start();\r\n        \r\n        return newGameObject;\r\n    }\r\n\r\n    public getGameObjectById(id: string): GameObject {\r\n        if (!this.gameObjectMap.has(id)) {\r\n            throw new Error(\"No GameObject with id of \" + id + \" exists!\");\r\n        }\r\n\r\n        return this.gameObjectMap.get(id);\r\n    }\r\n\r\n    public getGameCanvas(): HTMLCanvasElement {\r\n        return this.gameCanvas;\r\n    }\r\n\r\n    public getGameCanvasContext(): CanvasRenderingContext2D {\r\n        return this.canvasContext;\r\n    }\r\n\r\n    public printGameData(): void {\r\n        console.log(this);\r\n        console.log(\"Time since game start \" + Time.TotalTime + \"s\");\r\n\r\n        for(let i: number = 0; i < this.gameObjects.length; i++) {\r\n            console.log(this.gameObjects[i]);\r\n        }\r\n    }\r\n\r\n    public togglePause(): void {\r\n        this.paused = !this.paused;\r\n    }\r\n\r\n    private setGameCanvas(gameCanvas: HTMLCanvasElement): void {\r\n        this.gameCanvas = gameCanvas;\r\n        this.canvasContext = this.gameCanvas.getContext(\"2d\");\r\n    }\r\n\r\n    private setGameObjects(gameObjects: GameObject[]): void {\r\n        this.gameObjects = gameObjects;\r\n\r\n        for (let gameObject of gameObjects) {\r\n\r\n            if (this.gameObjectMap.has(gameObject.id)) {\r\n                let originalId = gameObject.id;\r\n                gameObject.id += \" Clone(\" + this.gameObjectNumMap.get(originalId) + \")\";\r\n                this.gameObjectNumMap.set(originalId, this.gameObjectNumMap.get(originalId) + 1);\r\n            }\r\n            else {\r\n                this.gameObjectNumMap.set(gameObject.id, 1);\r\n            }\r\n\r\n            this.gameObjectMap.set(gameObject.id, gameObject);\r\n        }\r\n    }\r\n\r\n    private update(): void {\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n\r\n        Time.updateTime();\r\n        this.renderBackground();\r\n        //this.physicsEngine.updatePhysics();\r\n        \r\n        for(let i: number = 0; i < this.gameObjects.length; i++){\r\n            this.gameObjects[i].update();\r\n        }\r\n    }\r\n\r\n    private renderBackground(): void {\r\n        this.background.render();\r\n    }\r\n\r\n    private gameLoop(): void { \r\n        this.update();\r\n        requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n}","import { GameObject } from \"../Core/GameObject\";\r\n\r\nexport abstract class Component {\r\n\r\n    public readonly gameObject: GameObject;\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        this.gameObject = gameObject;\r\n    }\r\n\r\n    public start(): void {};\r\n\r\n    public update(): void {};\r\n}","import { ILiteEvent } from \"../Interfaces/ILiteEvent\";\r\n\r\nexport class LiteEvent<T> implements ILiteEvent<T> {\r\n\r\n    private handlers: { (data?: T): void; }[] = [];\r\n\r\n\r\n    public add(handler: { (data?: T): void }) : void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public remove(handler: { (data?: T): void }) : void {\r\n        this.handlers = this.handlers.filter(h => h !== handler);\r\n    }\r\n\r\n    public trigger(data?: T) {\r\n        this.handlers.slice(0).forEach(h => h(data));\r\n    }\r\n\r\n    public expose() : ILiteEvent<T> {\r\n        return this;\r\n    }\r\n}","import { Component } from \"./Component\";\r\nimport { Vector2 } from \"../Core/Vector2\";\r\nimport { LiteEvent } from \"../Core/Helpers/LiteEvent\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { ILiteEvent } from \"../Core/Interfaces/ILiteEvent\";\r\n\r\nexport class Transform extends Component {\r\n\r\n    public width: number = 0;\r\n    public height: number = 0;\r\n    //Position is the top left of the agent with width growing right and height growing down.\r\n    public readonly position: Vector2;\r\n    //Rotation in radians\r\n    public rotation: number;\r\n\r\n    private readonly onMove = new LiteEvent<void>();\r\n\r\n    \r\n    public constructor(gameObject: GameObject, x: number, y: number, width: number, height: number) {\r\n        super(gameObject);\r\n        this.width = width;\r\n        this.height = height;\r\n        this.position = new Vector2(x, y);\r\n        this.rotation = 0;\r\n    }\r\n\r\n    public get onMoved(): ILiteEvent<void> { \r\n        return this.onMove.expose(); \r\n    }\r\n\r\n    public get center(): Vector2 {\r\n        return new Vector2(this.position.x + (this.width / 2), this.position.y + (this.height / 2));\r\n    }\r\n\r\n    public get bottomCenter(): Vector2 {\r\n        return new Vector2(this.position.x + (this.width / 2), this.position.y + this.height);\r\n    }\r\n\r\n    public translate(translation: Vector2): void {\r\n        this.position.x += translation.x;\r\n        this.position.y += (-1 * translation.y); //This is to make a more positive y value go up instead of down.\r\n        this.onMove.trigger();\r\n    }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        this.position.x = x;\r\n        this.position.y = y;\r\n        this.onMove.trigger();\r\n    }\r\n}","import { Transform } from \"../Components/Transform\";\r\nimport { Component } from \"../Components/Component\";\r\nimport { GameEngine } from \"./GameEngine\";\r\n\r\nexport abstract class GameObject {\r\n    \r\n    public id: string;\r\n\r\n    protected transform: Transform;\r\n    protected gameCanvas: HTMLCanvasElement;\r\n    protected canvasContext: CanvasRenderingContext2D;\r\n    protected components: Component[] = [];\r\n    protected componentMap: Map<string, Component> = new Map<string, Component>();\r\n    \r\n\r\n    public constructor(id: string, x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\r\n        this.id = id;\r\n        this.transform = new Transform(this, x, y, width, height);\r\n    }\r\n\r\n    public start(): void {\r\n        this.gameCanvas = GameEngine.Instance.getGameCanvas();\r\n        this.canvasContext = this.gameCanvas.getContext(\"2d\");\r\n\r\n        for(let i: number = 0; i < this.components.length; i++) {\r\n            this.components[i].start();\r\n        }\r\n    }\r\n\r\n    public update(): void {\r\n        for(let i: number = 0; i < this.components.length; i++) {\r\n            this.components[i].update();\r\n        }\r\n    }\r\n\r\n    public getTransform(): Transform {\r\n        return this.transform;\r\n    }\r\n\r\n    public getGameCanvas(): HTMLCanvasElement {\r\n        return this.gameCanvas;\r\n    }\r\n\r\n    public getComponent<T extends Component>(component: new (...args: any[]) => T): T {\r\n        let componentType = component.name;\r\n\r\n        if (!this.componentMap.has(componentType)) {\r\n            throw new Error(componentType + \" not found on the GameObject with id of \" + this.id + \"!\");\r\n        }\r\n\r\n        return <T>this.componentMap.get(componentType);\r\n    }\r\n\r\n    public addComponent<T extends Component>(newComponent: Component): T {\r\n        if (this.componentMap.has(newComponent.constructor.name)) {\r\n            throw new Error(\"There is already a component of type \" + newComponent.constructor.name + \" on this object!\");\r\n        }\r\n\r\n        this.components.push(newComponent);\r\n        this.componentMap.set(newComponent.constructor.name, newComponent);\r\n        newComponent.start();\r\n\r\n        return <T>newComponent;\r\n    }\r\n\r\n    protected setComponents(components: Component[]): void {\r\n        this.components = components;\r\n\r\n        for (let component of components) {\r\n            if (this.componentMap.has(component.constructor.name)) {\r\n                throw new Error(\"There is already a component of type \" + component.constructor.name + \" on this object!\");\r\n            }\r\n\r\n            this.componentMap.set(component.constructor.name, component);\r\n        }\r\n    }\r\n}","import { Vector2 } from \"../Core/Vector2\";\r\nimport { Component } from \"./Component\";\r\nimport { Transform } from \"./Transform\";\r\nimport { LiteEvent } from \"../Core/Helpers/LiteEvent\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { Physics } from \"../Core/Physics\";\r\n\r\nexport class RectangleCollider extends Component {\r\n\r\n    public topLeft: Vector2;\r\n    public topRight: Vector2;\r\n    public bottomLeft: Vector2;\r\n    public bottomRight: Vector2;\r\n    public readonly transform: Transform;\r\n\r\n    private readonly onCollide = new LiteEvent<RectangleCollider>();\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n\r\n        this.transform = gameObject.getTransform();\r\n        let transform: Transform = this.transform;\r\n\r\n        transform.onMoved.add(() => this.onTransformMoved());\r\n\r\n        this.topLeft = new Vector2(transform.position.x, transform.position.y);\r\n        this.topRight = new Vector2(transform.position.x + transform.width, transform.position.y);\r\n        this.bottomLeft = new Vector2(transform.position.x, transform.position.y + transform.height);\r\n        this.bottomRight = new Vector2(transform.position.x + transform.width, transform.position.y + transform.height);\r\n\r\n        Physics.Instance.addCollider(this);\r\n    }\r\n\r\n    public detectCollision(other: RectangleCollider): boolean {\r\n        \r\n        if(!(other.topLeft.x > this.topRight.x ||\r\n            other.topRight.x < this.topLeft.x ||\r\n            other.topLeft.y > this.bottomLeft.y ||\r\n            other.bottomLeft.y < this.topLeft.y)) {\r\n            this.onCollide.trigger(other);\r\n                \r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    public get onCollided() { \r\n        return this.onCollide.expose(); \r\n    }\r\n\r\n    public onTransformMoved(): void {\r\n        this.topLeft.x = this.transform.position.x;\r\n        this.topLeft.y = this.transform.position.y;\r\n        this.topRight.x = this.transform.position.x + this.transform.width;\r\n        this.topRight.y = this.transform.position.y;\r\n        this.bottomLeft.x = this.transform.position.x;\r\n        this.bottomLeft.y = this.transform.position.y + this.transform.height;\r\n        this.bottomRight.x = this.transform.position.x + this.transform.width;\r\n        this.bottomRight.y = this.transform.position.y + this.transform.height;\r\n    }\r\n}","import { Component } from \"../../GameEngine/Components/Component\";\r\nimport { Transform } from \"../../GameEngine/Components/Transform\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\n\r\nexport abstract class Motor extends Component {\r\n\r\n    protected transform: Transform;\r\n    protected gameCanvas: HTMLCanvasElement;\r\n    protected xVelocity: number = 0;\r\n    protected yVelocity: number = 0;\r\n    protected speed: number = 5\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n        this.transform = gameObject.getTransform();\r\n    }\r\n\r\n    public start(): void {\r\n        this.gameCanvas = this.gameObject.getGameCanvas();\r\n    }\r\n\r\n    public update(): void {\r\n        this.move();\r\n        this.handleOutOfBounds();\r\n    }\r\n\r\n    protected abstract move(): void;\r\n\r\n    protected abstract handleOutOfBounds(): void;\r\n}","import { Motor } from \"./Motor\";\r\nimport { RectangleCollider } from \"../../GameEngine/Components/RectangleCollider\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { GameEngine } from \"../../GameEngine/Core/GameEngine\";\r\nimport { Vector2 } from \"../../GameEngine/Core/Vector2\";\r\n\r\nexport class BallMotor extends Motor {\r\n\r\n    private playerCollider: RectangleCollider;\r\n    private computerCollider: RectangleCollider;\r\n    private collider: RectangleCollider;\r\n    private ready: boolean = true;\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public start(): void {\r\n        super.start();\r\n        \r\n        this.collider = this.gameObject.getComponent<RectangleCollider>(RectangleCollider);\r\n        this.playerCollider = GameEngine.Instance.getGameObjectById(\"player\").getComponent<RectangleCollider>(RectangleCollider);\r\n        this.computerCollider = GameEngine.Instance.getGameObjectById(\"computer\").getComponent<RectangleCollider>(RectangleCollider);\r\n\r\n        this.collider.onCollided.add((other: RectangleCollider) => this.handleCollision(other));\r\n    }\r\n\r\n    public update(): void {\r\n        super.update();\r\n        this.detectCollisions();\r\n    }\r\n\r\n    private handleCollision(other: RectangleCollider): void {\r\n        if (this.ready) {\r\n            this.ready = false;\r\n            this.xVelocity *= -1;\r\n            this.speed += 0.125;\r\n\r\n            setTimeout(() => {\r\n                this.ready = true;\r\n            }, 250);\r\n        }\r\n    }\r\n\r\n    protected handleOutOfBounds(): void {\r\n        if(this.transform.position.y <= 0) {\r\n            this.yVelocity *= -1;\r\n        }\r\n        else if(this.transform.position.y >= this.gameCanvas.height - this.transform.height) {\r\n            this.yVelocity = Math.abs(this.yVelocity);\r\n        }\r\n\r\n        if(this.transform.position.x + this.transform.width <= 0) {\r\n            this.reset();\r\n        }\r\n        else if(this.transform.position.x >= this.gameCanvas.width) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    protected move(): void {\r\n        this.transform.translate(new Vector2(this.xVelocity, this.yVelocity).multiplyScalar(this.speed));\r\n    }\r\n\r\n    private reset(): void {\r\n        this.transform.setPosition(345, 195);\r\n        this.xVelocity = Math.random() < 0.5 ? -1 : 1;\r\n        this.yVelocity = Math.random() < 0.5 ? -1 : 1;\r\n        this.speed = 3;\r\n    }\r\n\r\n    private detectCollisions(): void {\r\n        this.collider.detectCollision(this.playerCollider);\r\n        this.collider.detectCollision(this.computerCollider);\r\n    }\r\n}","import { Component } from \"./Component\";\r\nimport { Transform } from \"./Transform\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\n\r\nexport class RectangleRenderer extends Component {\r\n\r\n    private transform: Transform;\r\n    private gameCanvas: HTMLCanvasElement;\r\n    private canvasContext: CanvasRenderingContext2D;\r\n    private color: string;\r\n\r\n    public constructor(gameObject: GameObject, color: string) {\r\n        super(gameObject);\r\n\r\n        this.transform = gameObject.getTransform();\r\n        this.color = color\r\n    }\r\n\r\n    public start(): void {\r\n        this.gameCanvas = this.gameObject.getGameCanvas();\r\n        this.canvasContext = this.gameCanvas.getContext(\"2d\");\r\n    }\r\n\r\n    public update(): void {\r\n        this.render();\r\n    }\r\n\r\n    public setColor(color: string): void {\r\n        this.color = color;\r\n    }\r\n\r\n    private render(): void {\r\n        this.canvasContext.fillStyle = this.color;\r\n        this.canvasContext.fillRect(this.transform.position.x, this.transform.position.y, this.transform.width, this.transform.height);\r\n    }\r\n}","import { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { Component } from \"../../GameEngine/Components/Component\";\r\nimport { RectangleCollider } from \"../../GameEngine/Components/RectangleCollider\";\r\nimport { BallMotor } from \"../Components/BallMotor\";\r\nimport { RectangleRenderer } from \"../../GameEngine/Components/RectangleRenderer\";\r\n\r\nexport class Ball extends GameObject {\r\n\r\n    public constructor(id: string) {\r\n        super(id, 345, 195, 10, 10);\r\n\r\n        let ballComponents: Component[] = [];\r\n        \r\n        ballComponents.push(new RectangleCollider(this));\r\n        ballComponents.push(new BallMotor(this));\r\n        ballComponents.push(new RectangleRenderer(this, \"white\"));\r\n\r\n        this.setComponents(ballComponents);\r\n    }\r\n}","import { Component } from \"../../GameEngine/Components/Component\";\r\nimport { Player } from \"../GameObjects/Player\";\r\nimport { RectangleRenderer } from \"../../GameEngine/Components/RectangleRenderer\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { GameEngine } from \"../../GameEngine/Core/GameEngine\";\r\nimport { Ball } from \"../GameObjects/Ball\";\r\n\r\nexport class GameManager extends Component {\r\n\r\n    private static instance: GameManager;\r\n\r\n    private player: Player;\r\n    private playerRenderer: RectangleRenderer;\r\n\r\n\r\n    private constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n\r\n        document.getElementById(\"print-button\").addEventListener(\"click\", () => this.printGameData());\r\n        document.getElementById(\"pause-button\").addEventListener(\"click\", () => this.togglePause());\r\n        document.getElementById(\"add-ball\").addEventListener(\"click\", () => this.testInstantiate());\r\n    }\r\n\r\n    public start(): void {\r\n        this.player = GameEngine.Instance.getGameObjectById(\"player\");\r\n    }\r\n\r\n    public static get Instance(): GameManager {\r\n        if(this.instance === null || this.instance === undefined) {\r\n            throw new Error(\"GameManager has not been created yet. Use the createInstance method first.\");\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    public static createInstance(gameObject: GameObject): GameManager {\r\n        if(this.instance === null || this.instance === undefined) {\r\n            this.instance = new GameManager(gameObject);\r\n            return this.instance;\r\n        }\r\n        \r\n        throw new Error(\"More than one GameManager cannot be created!\");\r\n    }\r\n\r\n    private togglePause(): void {\r\n        GameEngine.Instance.togglePause();\r\n    }\r\n\r\n    private printGameData(): void {\r\n        GameEngine.Instance.printGameData();\r\n    }\r\n\r\n    private testInstantiate(): void {\r\n        GameEngine.Instance.instantiate(new Ball(\"ball2\"));\r\n    }\r\n}","import { Component } from \"./Component\";\r\nimport { Time } from \"../Core/Time\";\r\nimport { GameEngine } from \"../Core/GameEngine\";\r\n\r\nexport class FPSCounter extends Component {\r\n\r\n    private numFrames: number = 0;\r\n    private timer: number = 0;\r\n    private FPS: number = 0;\r\n    private canvasContext: CanvasRenderingContext2D;\r\n\r\n\r\n    public start(): void {\r\n        this.canvasContext = GameEngine.Instance.getGameCanvasContext();\r\n        this.canvasContext.font = \"20px Arial\";\r\n    }\r\n\r\n    public update(): void {\r\n        this.timer += Time.DeltaTime;\r\n        this.numFrames++;\r\n\r\n        if (this.timer >= 0.5) {\r\n            this.FPS = this.numFrames / this.timer;\r\n            this.timer = 0;\r\n            this.numFrames = 0;\r\n        }\r\n\r\n        this.canvasContext.fillText(\"FPS: \" + this.FPS.toFixed(2), 0, 20);\r\n    }\r\n}","export enum Keys {\r\n    UP = 38,\r\n    DOWN = 40,\r\n    LEFT = 37,\r\n    RIGHT = 39,\r\n    W = 87,\r\n    A = 65,\r\n    S = 83,\r\n    D = 68,\r\n    SPACE = 32\r\n}","import { Component } from \"./Component\";\r\nimport { Vector2 } from \"../Core/Vector2\";\r\nimport { Transform } from \"./Transform\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { Physics } from \"../Core/Physics\";\r\nimport { Time } from \"../Core/Time\";\r\n\r\nexport class Rigidbody extends Component {\r\n\r\n    // In kg\r\n    public mass: number;\r\n    public isKinomatic: boolean = false;\r\n    private velocity: Vector2;\r\n    private acceleration: Vector2;\r\n    \r\n    private force: Vector2;\r\n    private transform: Transform;\r\n\r\n\r\n    public constructor(gameObject: GameObject, mass: number = 70) {\r\n        super(gameObject);\r\n\r\n        this.transform = gameObject.getTransform();\r\n        this.mass = mass;\r\n        this.velocity = new Vector2(0, 0);\r\n        this.acceleration = new Vector2(0, 0);\r\n        this.force = Vector2.zero;\r\n        Physics.Instance.addRigidbody(this);\r\n    }\r\n\r\n    public update(): void {\r\n        if (this.isKinomatic) {\r\n            return;\r\n        }\r\n\r\n        this.addGravity(665);\r\n        this.velocity.add(this.force.divideScalar(this.mass));\r\n        this.transform.translate(this.velocity);\r\n    }\r\n\r\n    public addForce(force: Vector2): void {\r\n        this.force.add(force);\r\n    }\r\n\r\n    public addGravity(newtonsDown: number): void {\r\n        this.addForce(Vector2.down.multiplyScalar(newtonsDown).multiplyScalar(Time.DeltaTime));\r\n    }\r\n\r\n    public resetForce(): void {\r\n        this.force.zero();\r\n        this.velocity.zero();\r\n    }\r\n}","import { Transform } from \"./Transform\";\r\nimport { Component } from \"./Component\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { Animation } from \"../Core/Animation\";\r\n\r\nexport class Animator extends Component {\r\n\r\n  \r\n    private canvasContext: CanvasRenderingContext2D;\r\n    private transform: Transform;\r\n    private animation: Animation;\r\n\r\n\r\n    public constructor(gameObject: GameObject, initialAnimation: Animation) {\r\n        super(gameObject);\r\n        \r\n        this.animation = initialAnimation;\r\n    }\r\n\r\n    public start(): void {\r\n        this.canvasContext = this.gameObject.getGameCanvas().getContext(\"2d\");\r\n        this.transform = this.gameObject.getTransform();\r\n    }\r\n\r\n    public update(): void {\r\n        this.drawSprite();\r\n    }\r\n\r\n    public setAnimation(animation: Animation): void {\r\n        this.animation = animation;\r\n    }\r\n\r\n    private drawSprite(): void {\r\n        if (!this.animation.animationReady) {\r\n            return;\r\n        }\r\n\r\n        this.canvasContext.drawImage(this.animation.currentFrame, this.transform.position.x, this.transform.position.y, this.transform.width, this.transform.height);\r\n        this.animation.updateAnimation();\r\n    }\r\n}","import { Time } from \"./Time\";\r\n\r\nexport class Animation {\r\n\r\n    public loop: boolean = true;\r\n    public animationReady: boolean = false;\r\n    \r\n    private frames: HTMLImageElement[] = [];\r\n    private frameIndex: number = 0;\r\n    private delay: number = 0;\r\n    private timer: number = 0;\r\n    \r\n\r\n    public constructor(spriteSheetUrl: string, numFrames: number, numRows: number, delay: number = 0, specificRows: number[] = null) {        \r\n        this.delay = delay;\r\n\r\n        let spriteSheet = new Image();\r\n        spriteSheet.src = spriteSheetUrl;\r\n        spriteSheet.onload = () => {\r\n            let spriteWidth = spriteSheet.width / numFrames;\r\n            let spriteHeight = spriteSheet.height / numRows;\r\n\r\n            if (specificRows !== null) {\r\n                for (let row of specificRows) {\r\n                    if (row < 1 || row > numRows) {\r\n                        throw new Error(\"Invalid specificRow argument. It must be greater than 0 and less than or equal to numRows.\");\r\n                    }\r\n\r\n                    for (let i = 0; i < numFrames; i++) {\r\n                        this.animationReady = false;\r\n                        let canvas = document.createElement('canvas');\r\n                        \r\n                        canvas.width = spriteWidth;\r\n                        canvas.height = spriteHeight;\r\n    \r\n                        let context = canvas.getContext('2d');\r\n                        context.drawImage(spriteSheet, i * spriteWidth, (row - 1) * spriteHeight, spriteWidth, spriteHeight, 0, 0, canvas.width, canvas.height);\r\n                        let frame = new Image();\r\n                        frame.src = canvas.toDataURL();\r\n                        frame.onload = () => {\r\n                            this.frames.push(frame);\r\n                            this.animationReady = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < numRows; i++) {\r\n                    for (let j = 0; j < numFrames; j++) {\r\n                        this.animationReady = false;\r\n                        let canvas = document.createElement('canvas');\r\n                        \r\n                        canvas.width = spriteWidth;\r\n                        canvas.height = spriteHeight;\r\n    \r\n                        let context = canvas.getContext('2d');\r\n                        context.drawImage(spriteSheet, j * spriteWidth, i * spriteHeight, spriteWidth, spriteHeight, 0, 0, canvas.width, canvas.height);\r\n                        let frame = new Image();\r\n                        frame.src = canvas.toDataURL();\r\n                        frame.onload = () => {\r\n                            this.frames.push(frame);\r\n                            this.animationReady = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }        \r\n    }\r\n\r\n    public get currentFrame(): HTMLImageElement {\r\n        return this.frames[this.frameIndex];\r\n    }\r\n\r\n    public updateAnimation(): void {\r\n        if (!this.loop && this.frameIndex === this.frames.length - 1) {\r\n            return;\r\n        }\r\n\r\n        this.timer += Time.DeltaTime;\r\n\r\n        if (this.timer < this.delay) {\r\n            return;\r\n        }\r\n\r\n        this.timer = 0;\r\n\r\n        this.frameIndex = (this.frameIndex + 1) % this.frames.length;\r\n    }\r\n}","import { Motor } from \"./Motor\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { Vector2 } from \"../../GameEngine/Core/Vector2\";\r\nimport { Keys } from \"../../GameEngine/Core/Helpers/Keys\";\r\nimport { Rigidbody } from \"../../GameEngine/Components/Rigidbody\";\r\nimport MovingRightSprite from \"../../assets/mario.png\"\r\nimport MovingLeftSprite from \"../../assets/marioLeft.png\"\r\nimport { Animator } from \"../../GameEngine/Components/Animator\";\r\nimport { Animation } from \"../../GameEngine/Core/Animation\";\r\nimport { Physics } from \"../../GameEngine/Core/Physics\";\r\n\r\n\r\nexport class PlayerMotor extends Motor {\r\n\r\n    private movingRight: boolean = false;\r\n    private movingLeft: boolean = false;\r\n    private moveRightAnimation: Animation;\r\n    private moveLeftAnimation: Animation;\r\n    private jumping: boolean = false;\r\n    private rigidBody: Rigidbody;\r\n    private animator: Animator;\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n\r\n        document.addEventListener('keydown', () => this.onKeyDown(<KeyboardEvent>event));\r\n        document.addEventListener('keyup', () => this.onKeyUp(<KeyboardEvent>event));\r\n        document.addEventListener('click', () => this.onClick(<MouseEvent>event));\r\n        this.moveRightAnimation = new Animation(MovingRightSprite, 4, 1, 0.1);\r\n        this.moveLeftAnimation = new Animation(MovingLeftSprite, 4, 1, 0.1);\r\n    }\r\n\r\n    public start(): void {\r\n        super.start();\r\n\r\n        this.rigidBody = this.gameObject.getComponent<Rigidbody>(Rigidbody);\r\n        this.animator = this.gameObject.getComponent<Animator>(Animator);\r\n    }\r\n\r\n    public get isMoving(): boolean { \r\n        return this.xVelocity !== 0 || this.yVelocity !== 0;\r\n    }\r\n\r\n    protected handleOutOfBounds(): void {\r\n        if (this.transform.position.y <= 0) {\r\n            this.transform.position.y = 1;\r\n        }\r\n        else if (this.transform.position.y + this.transform.height >= this.gameCanvas.height - 55) {\r\n            this.rigidBody.isKinomatic = true;\r\n            this.jumping = false;\r\n            this.transform.position.y = (this.gameCanvas.height - this.transform.height) - 56;\r\n        }\r\n\r\n        if (this.transform.position.x <= 0) {\r\n            this.transform.position.x = 1;\r\n        }\r\n        else if (this.transform.position.x + this.transform.width >= this.gameCanvas.width) {\r\n            this.transform.position.x = (this.gameCanvas.width - this.transform.width) - 1;\r\n        }\r\n    }\r\n\r\n    protected move(): void {\r\n        if (this.movingRight) {\r\n            this.xVelocity = 1;\r\n        }\r\n        else if (this.movingLeft) {\r\n            this.xVelocity = -1;\r\n        }\r\n        else {\r\n            this.xVelocity = 0;\r\n        }\r\n        \r\n        if (this.isMoving) {\r\n            this.transform.translate(new Vector2(this.xVelocity, this.yVelocity).multiplyScalar(this.speed));\r\n        }\r\n    }\r\n\r\n    private jump(): void {\r\n        if (this.jumping) {\r\n            return;\r\n        }\r\n\r\n        this.jumping = true;\r\n        this.rigidBody.isKinomatic = false;\r\n        this.rigidBody.resetForce()\r\n        this.rigidBody.addForce(Vector2.up.multiplyScalar(400));\r\n    }\r\n\r\n    private onClick(event: MouseEvent): void {\r\n        let hit = Physics.raycast(new Vector2(this.transform.position.x, this.transform.position.y - 1), Vector2.right, 5000);\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent): void {\r\n        if (event.keyCode == Keys.RIGHT || event.keyCode == Keys.D) {\r\n            this.movingRight = true;\r\n            this.movingLeft = false;\r\n            this.animator.setAnimation(this.moveRightAnimation);\r\n        }\r\n        else if (event.keyCode == Keys.LEFT || event.keyCode == Keys.A) {\r\n            this.movingRight = false;\r\n            this.movingLeft = true;\r\n            this.animator.setAnimation(this.moveLeftAnimation);\r\n        }\r\n\r\n        if (event.keyCode == Keys.SPACE) {\r\n            this.jump();\r\n        }\r\n    }\r\n\r\n    private onKeyUp(event: KeyboardEvent): void {\r\n        if (event.keyCode == Keys.RIGHT || event.keyCode == Keys.D) {\r\n            this.movingRight = false;\r\n        }\r\n        else if (event.keyCode == Keys.LEFT || event.keyCode == Keys.A) {\r\n            this.movingLeft = false;\r\n        }\r\n    }\r\n}","import { Motor } from \"./Motor\";\r\nimport { Transform } from \"../../GameEngine/Components/Transform\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { GameEngine } from \"../../GameEngine/Core/GameEngine\";\r\nimport { Time } from \"../../GameEngine/Core/Time\";\r\nimport { Vector2 } from \"../../GameEngine/Core/Vector2\";\r\n\r\nexport class ComputerMotor extends Motor {\r\n\r\n    private ballTransform: Transform;\r\n    private timer: number = 0;\r\n    private quarterFieldX: number;\r\n    private midFieldY: number;\r\n\r\n\r\n    public constructor(gameObject: GameObject) {\r\n        super(gameObject);\r\n\r\n        this.yVelocity = 1;\r\n    }\r\n\r\n    public start(): void {\r\n        super.start();\r\n\r\n        this.ballTransform = GameEngine.Instance.getGameObjectById(\"ball\").getTransform();\r\n        this.quarterFieldX = this.gameCanvas.width / 4;\r\n        this.midFieldY = this.gameCanvas.height / 2;\r\n    }\r\n\r\n    protected handleOutOfBounds(): void {\r\n        if(this.transform.position.y <= 0) {\r\n            this.yVelocity = -1;\r\n        }\r\n        else if(this.transform.position.y >= this.gameCanvas.height - this.transform.height) {\r\n            this.yVelocity = 1;\r\n        }\r\n    }\r\n\r\n    protected move(): void {\r\n        if(this.ballTransform.position.x < this.quarterFieldX) {\r\n            if(this.transform.position.y > this.midFieldY + 5) {\r\n                this.yVelocity = 1;\r\n            }\r\n            else if(this.transform.position.y < this.midFieldY - 5) {\r\n                this.yVelocity = -1;\r\n            }\r\n            else {\r\n                this.yVelocity = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.timer += Time.DeltaTime;\r\n\r\n            if(this.timer > 0.15) {\r\n                if(this.transform.center.y < this.ballTransform.center.y - 10) {\r\n                    this.yVelocity = -1;\r\n                }\r\n                else if (this.transform.center.y > this.ballTransform.center.y + 10){\r\n                    this.yVelocity = 1;\r\n                }\r\n                else {\r\n                    this.yVelocity = 0;\r\n                }\r\n    \r\n                this.timer = 0;\r\n            }\r\n        }\r\n\r\n        this.transform.translate(new Vector2(this.xVelocity, this.yVelocity).multiplyScalar(this.speed));\r\n    }\r\n}","import { GameEngine } from \"./GameEngine/Core/GameEngine\";\r\nimport { ImageBackground } from \"./GameEngine/Core/ImageBackground\";\r\nimport { GameManagerObject } from \"./Mario/GameObjects/GameManagerObject\";\r\nimport { Player } from \"./Mario/GameObjects/Player\";\r\nimport { Ball } from \"./Mario/GameObjects/Ball\";\r\nimport { Computer } from \"./Mario/GameObjects/Computer\";\r\nimport { GameObject } from \"./GameEngine/Core/GameObject\";\r\nimport Background from \"./assets/background.png\";\r\nimport { Trump } from \"./Mario/GameObjects/Trump\";\r\n\r\n\r\nlet gameEngine: GameEngine = GameEngine.Instance;\r\n\r\nlet gameCanvas: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(\"game-canvas\");\r\n\r\nlet background: ImageBackground = new ImageBackground(gameCanvas, Background);\r\n\r\nlet gameManager: GameManagerObject = new GameManagerObject(\"GameManager\");\r\n\r\nlet player: Player = new Player(\"player\");\r\nlet ball: Ball = new Ball(\"ball\");\r\nlet computer: Computer = new Computer(\"computer\");\r\nlet trump: Trump = new Trump(\"trump\");\r\n\r\nlet gameObjects: GameObject[] = [gameManager, player, computer, ball, trump];\r\n\r\ngameEngine.initializeGame(gameCanvas, gameObjects, background);\r\n\r\ngameEngine.startGame();","import { IBackground } from \"./Interfaces/IBackground\";\r\n\r\nexport class ImageBackground implements IBackground {\r\n    \r\n    private gameCanvas: HTMLCanvasElement;\r\n    private canvasContext: CanvasRenderingContext2D;\r\n    private image: HTMLImageElement;\r\n\r\n\r\n    public constructor(gameCanvas: HTMLCanvasElement, imageSrc: string) {\r\n        this.image = new Image(gameCanvas.width, gameCanvas.height);\r\n        this.image.src = imageSrc;\r\n        this.canvasContext = gameCanvas.getContext(\"2d\");\r\n        this.gameCanvas = gameCanvas;\r\n    }\r\n    \r\n    public render(): void {\r\n        this.canvasContext.drawImage(this.image, 0, 0, this.gameCanvas.width, this.gameCanvas.height);\r\n    }\r\n}","import { Component } from \"../../GameEngine/Components/Component\";\r\nimport { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { GameManager } from \"../Components/GameManager\";\r\nimport { FPSCounter } from \"../../GameEngine/Components/FPSCounter\";\r\n\r\nexport class GameManagerObject extends GameObject {\r\n\r\n    public constructor(id: string) {\r\n        super(id, 0, 0, 0, 0);\r\n\r\n        let gameManagerComponents: Component[] = [];\r\n        \r\n        let gameManager = GameManager.createInstance(this);\r\n        gameManagerComponents.push(gameManager);\r\n        gameManagerComponents.push(new FPSCounter(this));\r\n\r\n        this.setComponents(gameManagerComponents);\r\n    }\r\n}","import { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { Component } from \"../../GameEngine/Components/Component\";\r\nimport { RectangleCollider } from \"../../GameEngine/Components/RectangleCollider\";\r\nimport { PlayerMotor } from \"../Components/PlayerMotor\";\r\nimport { Rigidbody } from \"../../GameEngine/Components/Rigidbody\";\r\nimport { Animator } from \"../../GameEngine/Components/Animator\";\r\nimport MarioSprite from \"../../assets/mario.png\";\r\nimport { Animation } from \"../../GameEngine/Core/Animation\";\r\n\r\nexport class Player extends GameObject {\r\n\r\n    public constructor(id: string) {\r\n        super(id, 2, 175, 10, 50);\r\n\r\n        let playerComponents: Component[] = [];\r\n        \r\n        playerComponents.push(new RectangleCollider(this));\r\n        playerComponents.push(new PlayerMotor(this));\r\n        playerComponents.push(new Rigidbody(this));\r\n        \r\n        let initialAnimation = new Animation(MarioSprite, 4, 1, 0.1);\r\n\r\n        playerComponents.push(new Animator(this, initialAnimation));\r\n\r\n\r\n        this.setComponents(playerComponents);\r\n    }\r\n}","import { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { Component } from \"../../GameEngine/Components/Component\";\r\nimport { RectangleCollider } from \"../../GameEngine/Components/RectangleCollider\";\r\nimport { ComputerMotor } from \"../Components/ComputerMotor\";\r\nimport { RectangleRenderer } from \"../../GameEngine/Components/RectangleRenderer\";\r\n\r\n\r\nexport class Computer extends GameObject {\r\n\r\n    public constructor(id: string) {\r\n        super(id, 688, 175, 10, 50);\r\n\r\n        let computerComponents: Component[] = [];\r\n        \r\n        computerComponents.push(new RectangleCollider(this));\r\n        computerComponents.push(new ComputerMotor(this));\r\n        computerComponents.push(new RectangleRenderer(this, \"white\"));\r\n\r\n        this.setComponents(computerComponents);\r\n    }\r\n}","import { GameObject } from \"../../GameEngine/Core/GameObject\";\r\nimport { Component } from \"../../GameEngine/Components/Component\";\r\nimport { RectangleCollider } from \"../../GameEngine/Components/RectangleCollider\";\r\nimport TrumpIdleSprite from \"../../assets/trump_idle.png\";\r\nimport { Animation } from \"../../GameEngine/Core/Animation\";\r\nimport { Animator } from \"../../GameEngine/Components/Animator\";\r\n\r\nexport class Trump extends GameObject {\r\n\r\n    public constructor(id: string) {\r\n        super(id, 400, 280, 75, 75);\r\n\r\n        let computerComponents: Component[] = [];\r\n        \r\n        computerComponents.push(new RectangleCollider(this));\r\n\r\n        let initialAnimation = new Animation(TrumpIdleSprite, 10, 4, 0.1, [4]);\r\n        computerComponents.push(new Animator(this, initialAnimation));\r\n\r\n        this.setComponents(computerComponents);\r\n    }\r\n}"],"sourceRoot":""}