- Use maps in ITerrainSpec to map floor tile/wall/whatever to an array of possible sprites (for more diverse). All stats same except image
- Use this when building the image to get more randomized flooring
- Make a start path straighter? 
- Look into having an array for function calls for rendering engine and stuff (loop though and call each function) 
    and being able to dynamically inject and remove function calls from update.
- Do something similar for general update?
- Continue to work on impulese collision resolution. Friction is wonky. Infinite mass object still don't work. Still losing energy in fully elastic collisions.
- Write tests for game objects and components.
- Figure out a way to decouple components from rendering and physics engines.
- Continue to move to DI for component dependencies for other components on the game object (dependencies on other game objects (including parent and children) are
    still obtained through the use of start and find/getComponent. This is intentional)
- Abstract APIs (Input, Physics, SceneManager, etc) into the GameEngine to make them services and have them injected into components.
- Finish destroy logic (using callbacks to remove objects from things like the physics engine and stuff)
- Make destroy and instantiate do their stuff in update for predictable results
