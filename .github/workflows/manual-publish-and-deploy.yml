# This workflow is triggered manually using the repository_dispatch event:
# https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch
#
# Input will be parsed as {confirm}:{branch to use}. If no branch is passed, it will default to master
# Examples:
#   `yes:dev` will run this workflow using the dev branch
#   `no:dev` will not run this workflow
#   `yes` will run this workflow using master branch
#
# This workflow is unable to use the cache action as it only supports push and pull request events as of now.
#
# Secrets used:
# DEPLOY_SOURCE: the path to the folder/file to be deployed. Example: ./sample-games/sample-game-1/dist/* will deploy all files in dist folder
# REMOTE_USER: to user to ssh into the remote server as
# REMOTE_HOST: the IP/Domain to ssh into
# REMOTE_TARGET: the target directory on the remote host to copy the source files to. Example: /var/www/html/sample-site
# SERVER_SSH_KEY: the private key that matches the public key on the remote server
# KNOWN_HOSTS: the known hosts. Run `ssh-keyscan {{ IP/Domain }}` to obtain this
# NPM_TOKEN: access token for NPM. Obtained on NPM site.

name: Manual Publish and Deploy

on:
  repository_dispatch:
    types: [manual_publish_and_deploy]

env:
  INPUT: ${{ github.event.client_payload.Confirm }}

jobs:
  check_response:
    runs-on: ubuntu-latest
    name: Check Response
    steps:
      - name: Check Response
        run: |
          IN=$INPUT
          arrIN=(${IN//:/ })
          response=${arrIN[0]}
          if [ ${response^^} != 'YES' ]
          then
            exit 1 
          fi

  lint_and_test:
    needs:
      - check_response
    runs-on: ubuntu-latest
    name: Lint and Test
    steps:
      - name: Set branch
        run: |
          IN=$INPUT
          arrIN=(${IN//:/ })
          if [ ${#arrIN[@]} -gt 1 ]
          then
            echo "::set-env name=BRANCH::${arrIN[1]}"
          else
            echo "::set-env name=BRANCH::master"
          fi
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test

  publish_packages:
    runs-on: ubuntu-latest
    name: Publish Packages
    needs:
      - check_response
      - lint_and_test
    steps:
      - name: Set branch
        run: |
          IN=$INPUT
          arrIN=(${IN//:/ })
          if [ ${#arrIN[@]} -gt 1 ]
          then
            echo "::set-env name=BRANCH::${arrIN[1]}"
          else
            echo "::set-env name=BRANCH::master"
          fi
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install dependencies
        run: npm install
      - name: Build packages
        run: npm run compile
      - name: Build games
        run: npx lerna run build-game
      - name: Authenticate with GitHub
        run: |
          # git config http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo x-access-token:${{secrets.GITHUB_TOKEN}} | base64)"
          git remote set-url origin https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git
          git checkout $BRANCH
          git config user.name "Github Actions"
          git config user.email "bot@github.com"
      - name: Stash changes
        run: git stash
      - name: Authenticate with NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish
        run: npx lerna publish --yes
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  deploy:
    runs-on: ubuntu-latest
    name: Deply to Remote Server
    needs:
      - check_response
      - lint_and_test
      - publish_packages
    steps:
      - name: Set branch
        run: |
          IN=$INPUT
          arrIN=(${IN//:/ })
          if [ ${#arrIN[@]} -gt 1 ]
          then
            echo "::set-env name=BRANCH::${arrIN[1]}"
          else
            echo "::set-env name=BRANCH::master"
          fi
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install dependencies
        run: npm install
      - name: Build packages
        run: npm run compile
      - name: Build games
        run: npx lerna run build-game
      - name: Get build version
        uses: tyankatsu0105/read-package-version-actions@v1
        with:
          path: ./sample-games/sample-game-1
        id: package-version
      - name: Get timestamp
        run: echo "::set-env name=TIMESTAMP::$(date +'%s')"
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: game-build-v${{ steps.package-version.outputs.version }}-${{ env.TIMESTAMP }}
          path: ./sample-games/sample-game-1/dist
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Clean remote directories
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'rm -rf /var/www/html/entropy/sample-game-1/* && rm -rf /var/www/html/entropy/sample-game-2/*'
      - name: Copy builds to remote server
        run: |
          scp -r ./sample-games/sample-game-1/dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/entropy/sample-game-1
          scp -r ./sample-games/sample-game-2/dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/entropy/sample-game-2
