# This workflow is triggered manually using workflow_dispatch
#
# Secrets used:
# DEPLOY_SOURCE: the path to the folder/file to be deployed. Example: ./sample-games/sample-game-1/dist/* will deploy all files in dist folder
# REMOTE_USER: to user to ssh into the remote server as
# REMOTE_HOST: the IP/Domain to ssh into
# REMOTE_TARGET: the target directory on the remote host to copy the source files to. Example: /var/www/html/sample-site
# SERVER_SSH_KEY: the private key that matches the public key on the remote server
# KNOWN_HOSTS: the known hosts. Run `ssh-keyscan {{ IP/Domain }}` to obtain this

name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: Confirm
        required: true
      upload-build:
        description: Upload Build
        required: false
        default: "false"
      git-ref:
        description: Git Ref (Optional)
        required: false

jobs:
  check_response:
    runs-on: ubuntu-latest
    name: Check Response
    steps:
      - name: Check Response
        run: |
          response=${{ github.event.inputs.confirm }}
          if [ ${response^^} != 'YES' ]
          then
            exit 1 
          fi

  deploy:
    runs-on: ubuntu-latest
    name: Deply to Remote Server
    needs:
      - check_response
    steps:
      - name: Checkout
        if: github.event.inputs.git-ref == ''
        uses: actions/checkout@v2
      - name: Checkout (Custom Ref)
        if: github.event.inputs.git-ref != ''
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.git-ref }}
      - uses: actions/setup-node@v1
        with:
          node-version: "16"
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build packages
        run: npm run compile
      - name: Build games
        run: npm run build-games
      - name: Get build version
        if: github.event.inputs.upload-build == 'true'
        uses: tyankatsu0105/read-package-version-actions@v1
        with:
          path: ./sample-games/sample-game-1
        id: package-version
      - name: Get timestamp
        if: github.event.inputs.upload-build == 'true'
        run: echo "TIMESTAMP=$(date +'%s')" >> $GITHUB_ENV
      - name: Upload build
        if: github.event.inputs.upload-build == 'true'
        uses: actions/upload-artifact@v1
        with:
          name: game-build-v${{ steps.package-version.outputs.version }}-${{ env.TIMESTAMP }}
          path: ./sample-games/sample-game-1/dist
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Clean remote directories
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'rm -rf /var/www/html/entropy/sample-game-1/* && rm -rf /var/www/html/entropy/sample-game-2/* && rm -rf /var/www/html/entropy/sample-game-3/*'
      - name: Copy builds to remote server
        run: |
          scp -r ./sample-games/sample-game-1/dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/entropy/sample-game-1
          scp -r ./sample-games/sample-game-2/dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/entropy/sample-game-2
          scp -r ./sample-games/sample-game-3/dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/entropy/sample-game-3
