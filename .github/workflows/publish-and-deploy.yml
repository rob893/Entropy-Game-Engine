# This workflow fires off of pushes to master branch. If the head commit message contains '[skip ci]', the whole workflow will be skipped.
# If head commit message contains '[skip publish]', both publishing and deployment will be skipped (as deploy depends on publishing).
# If head commit message contains '[skip deploy]', testing, linting, and publishing will occur, but deployment will be skipped.
#
# Secrets used:
# DEPLOY_SOURCE: the path to the folder/file to be deployed. Example: ./sample-games/sample-game-1/dist/* will deploy all files in dist folder.
# REMOTE_USER: to user to ssh into the remote server as
# REMOTE_HOST: the IP/Domain to ssh into
# REMOTE_TARGET: the target directory on the remote host to copy the source files to. Example: /var/www/html/sample-site
# SERVER_SSH_KEY: the private key that matches the public key on the remote server
# KNOWN_HOSTS: the known hosts. Run `ssh-keyscan {{ IP/Domain }}` to obtain this
# NPM_TOKEN: access token for NPM. Obtained on NPM site.

name: Publish and Deploy

on:
  push:
    branches: [master]

jobs:
  lint_and_test:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    name: Lint and Test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test

  publish_packages:
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip publish]')"
    runs-on: ubuntu-latest
    name: Publish Packages
    needs:
      - lint_and_test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build packages
        run: npm run compile
      - name: Build games
        run: npx lerna run build-game
      - name: Authenticate with GitHub
        run: |
          # git config http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo x-access-token:${{secrets.GITHUB_TOKEN}} | base64)"
          git remote set-url origin https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git
          git checkout "${GITHUB_REF:11}"
          git config user.name "Github Actions"
          git config user.email "bot@github.com"
      - name: Authenticate with NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish
        run: npx lerna publish --yes
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  deploy:
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip deploy]')"
    runs-on: ubuntu-latest
    name: Deply to Remote Server
    needs:
      - lint_and_test
      - publish_packages
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build packages
        run: npm run compile
      - name: Build games
        run: npx lerna run build-game
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Clean remote directory
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'rm -rf ${{ secrets.REMOTE_TARGET }}/*'
      - name: Copy build to remote server
        run: scp -r ${{ secrets.DEPLOY_SOURCE }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_TARGET }}
